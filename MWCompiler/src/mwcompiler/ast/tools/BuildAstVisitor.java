/**
 * BuildAstVisitor.java
 * Class for building the AST, by extending from the MxBase Visitor generated by antlr.v4
 *
 * @author Michael Wu
 * @since 2018-04-06
 */
package mwcompiler.ast.tools;

import mwcompiler.ast.*;
import mwcompiler.symbols.Type;
import mx_gram.tools.*;

import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.*;

import java.util.ArrayList;
import java.util.List;

public class BuildAstVisitor extends MxBaseVisitor<Node> {

    @Override
    public Node visitProgram(MxParser.ProgramContext ctx) {
        List<DeclaratorNode> declarators = new ArrayList<>();
        for (ParseTree child : ctx.declarator()) {
            Node childNode = visit(child);
            if (childNode instanceof DeclaratorNode)
                declarators.add((DeclaratorNode) childNode);
            else
                throw new RuntimeException("Type Mismatch when visiting program");
        }
        return new ProgramNode(declarators);
    }

    // Variable declaration
    @Override
    public Node visitVariableDeclField(MxParser.VariableDeclFieldContext ctx) {
        VariableDeclNode node = (VariableDeclNode) visit(ctx.variableField());
        node.type = (TypeNode) visit(ctx.type());
        node.typePos = new Location(ctx.type());
        return node;
    }


    @Override
    public Node visitVariableField(MxParser.VariableFieldContext ctx) {
        VariableDeclNode node = new VariableDeclNode();
        node.var = new IdentifierNode(ctx.Identifier().getText());
        node.namePos = new Location(ctx.Identifier());
        if (ctx.variableInitializer() != null) {
            node.init = (ExprNode) this.visit(ctx.variableInitializer());
            node.initPos = new Location(ctx.variableInitializer());
        } else {
            node.init = null;
            node.initPos = null;
        }
        return node;
    }

    @Override
    public Node visitVariableInitializer(MxParser.VariableInitializerContext ctx) {
        return this.visit(ctx.expr());
    }

    // Type
    @Override
    public Node visitPrimitiveType_(MxParser.PrimitiveType_Context ctx) {
        return new NonArrayTypeNode(ctx.getText());
    }

    @Override
    public Node visitClassType_(MxParser.ClassType_Context ctx) {
        return new NonArrayTypeNode(ctx.getText());
    }

    @Override
    public Node visitArrayType_(MxParser.ArrayType_Context ctx) {
        Node node = visit(ctx.type());
        if (node instanceof ArrayTypeNode) {
            ((ArrayTypeNode) node).addDimension();
        } else if (node instanceof NonArrayTypeNode){
            node = new ArrayTypeNode((NonArrayTypeNode) node);
        } else {
            throw new RuntimeException("Get unexpected type when visit Array Type");
        }
        return node;
    }

    // Expression
    @Override
    public Node visitLiteral(MxParser.LiteralContext ctx) {
        String val = ctx.getText();
        LiteralExprNode node;
        switch (ctx.literalType.getType()) {
            case MxParser.BoolLiteral:
                node = new BoolLiteralNode(val);
                break;
            case MxParser.IntLiteral:
                node = new IntLiteralNode(val);
                break;
            case MxParser.StringLiteral:
                node = new StringLiteralNode(val);
                break;
            case MxParser.NULL:
                node = new NullLiteralNode();
                break;
            default:
                throw new RuntimeException("Get unexpected literal type when visiting literal");
        }
        return node;
    }

    @Override
    public Node visitIdentifier_(MxParser.Identifier_Context ctx) {
        return new IdentifierExprNode(ctx.getText(), new Location(ctx));
    }

    // Binary Expression
    @Override
    public Node visitAssignExpr_(MxParser.AssignExpr_Context ctx) {
        return new BinaryExprNode((ExprNode) this.visit(ctx.expr(0)), ExprNode.OPs.ASSIGN, (ExprNode) this.visit(ctx.expr(1)));
    }


    //TODO
}
